From ec91a7860c1395b47ab1a364e929888c8956012c Mon Sep 17 00:00:00 2001
From: Balint Seeber <balint@ettus.com>
Date: Wed, 19 Mar 2014 18:44:48 -0700
Subject: [PATCH 12/15] b200: reverted decim mask for scaling factor, and
 instead conditionally add new X3x0 host rates
 (get_host_rates) with '_is_b200'

---
 host/lib/usrp/cores/rx_dsp_core_3000.cpp |    8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/host/lib/usrp/cores/rx_dsp_core_3000.cpp b/host/lib/usrp/cores/rx_dsp_core_3000.cpp
index 69829bf..02c24b4 100644
--- a/host/lib/usrp/cores/rx_dsp_core_3000.cpp
+++ b/host/lib/usrp/cores/rx_dsp_core_3000.cpp
@@ -91,8 +91,10 @@ public:
 
     uhd::meta_range_t get_host_rates(void){
         meta_range_t range;
-	for (int rate = 1024; rate > 512; rate -= 8){
-            range.push_back(range_t(_tick_rate/rate));
+        if (!_is_b200) {
+            for (int rate = 1024; rate > 512; rate -= 8){
+                range.push_back(range_t(_tick_rate/rate));
+            }
         }
         for (int rate = 512; rate > 256; rate -= 4){
             range.push_back(range_t(_tick_rate/rate));
@@ -161,7 +163,7 @@ public:
 
         // Calculate CIC decimation (i.e., without halfband decimators)
         // Calculate closest multiplier constant to reverse gain absent scale multipliers
-        const double rate_pow = std::pow(double(decim & 0x1ff), 4);
+        const double rate_pow = std::pow(double(decim & 0xff), 4);
         _scaling_adjustment = std::pow(2, ceil_log2(rate_pow))/(1.65*rate_pow);
         this->update_scalar();
 
-- 
1.7.10.4

