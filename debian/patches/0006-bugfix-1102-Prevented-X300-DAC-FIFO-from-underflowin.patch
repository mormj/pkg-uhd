From bf74b4e85d6d2b8833c35b1f243eb36b99432250 Mon Sep 17 00:00:00 2001
From: Ashish Chaudhari <ashish@ettus.com>
Date: Wed, 25 May 2016 16:08:12 -0700
Subject: [PATCH 06/42] bugfix#1102: Prevented X300 DAC FIFO from underflowing

- The spectral distortion was begin caused by the DAC FIFO
  underflowing. The fix was to run through the DAC sync
  procedure which uses the falling edge clock to sample
  the RefClk and sync it with the data clk
---
 host/lib/usrp/x300/x300_adc_dac_utils.cpp |  2 +-
 host/lib/usrp/x300/x300_dac_ctrl.cpp      | 14 +++-----------
 host/lib/usrp/x300/x300_dac_ctrl.hpp      |  3 ---
 3 files changed, 4 insertions(+), 15 deletions(-)

diff --git a/host/lib/usrp/x300/x300_adc_dac_utils.cpp b/host/lib/usrp/x300/x300_adc_dac_utils.cpp
index e088257..cd337fe 100644
--- a/host/lib/usrp/x300/x300_adc_dac_utils.cpp
+++ b/host/lib/usrp/x300/x300_adc_dac_utils.cpp
@@ -35,7 +35,7 @@ void x300_impl::synchronize_dacs(const std::vector<radio_perifs_t*>& radios)
 
     //Reinitialize and resync all DACs
     for (size_t i = 0; i < radios.size(); i++) {
-        radios[i]->dac->reset_and_resync();
+        radios[i]->dac->reset();
     }
 
     //Get a rough estimate of the cumulative command latency
diff --git a/host/lib/usrp/x300/x300_dac_ctrl.cpp b/host/lib/usrp/x300/x300_dac_ctrl.cpp
index bb41146..d49fba3 100644
--- a/host/lib/usrp/x300/x300_dac_ctrl.cpp
+++ b/host/lib/usrp/x300/x300_dac_ctrl.cpp
@@ -69,21 +69,13 @@ public:
         //ADI recommendations:
         //- soft reset the chip before configuration
         //- put the chip in sleep mode during configuration and wake it up when done
-        _soft_reset();
-        _sleep_mode(true);
-        _init();
-        _sleep_mode(false);
-    }
-
-    void reset_and_resync()
-    {
-        //ADI recommendations:
-        //- soft reset the chip before configuration
-        //- put the chip in sleep mode during configuration and wake it up when done
         //- configure synchronization settings when sleeping
         _soft_reset();
         _sleep_mode(true);
         _init();
+        //We run backend sync regardless of whether we need to sync multiple DACs
+        //because we use the internal DAC FIFO to meet system synchronous timing
+        //and we need to guarantee that the FIFO is not empty.
         _backend_sync();
         _sleep_mode(false);
     }
diff --git a/host/lib/usrp/x300/x300_dac_ctrl.hpp b/host/lib/usrp/x300/x300_dac_ctrl.hpp
index c2e509b..f2a4079 100644
--- a/host/lib/usrp/x300/x300_dac_ctrl.hpp
+++ b/host/lib/usrp/x300/x300_dac_ctrl.hpp
@@ -40,9 +40,6 @@ public:
     // ! Reset the DAC
     virtual void reset(void) = 0;
 
-    // ! Reset the DAC and resync
-    virtual void reset_and_resync(void) = 0;
-
     // ! Check for successful backend and frontend sync
     virtual void verify_sync(void) = 0;
 };
-- 
2.1.4

