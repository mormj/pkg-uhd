From 1325cdd1fa530be473de39f171acba309d00b270 Mon Sep 17 00:00:00 2001
From: Paul David <paul.david@ettus.com>
Date: Tue, 17 May 2016 10:15:29 -0700
Subject: [PATCH 03/29] examples: Increased the reference locking timeout in
 benchmark_rate

---
 host/examples/benchmark_rate.cpp | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/host/examples/benchmark_rate.cpp b/host/examples/benchmark_rate.cpp
index bf30151..0f01da0 100644
--- a/host/examples/benchmark_rate.cpp
+++ b/host/examples/benchmark_rate.cpp
@@ -31,7 +31,8 @@
 
 namespace po = boost::program_options;
 
-const double INIT_DELAY = 0.05;  // 50mS initial delay before transmit
+const double CLOCK_TIMEOUT = 1000;  // 1000mS timeout for external clock locking
+const double INIT_DELAY    = 0.05;  // 50mS initial delay before transmit
 //typedef boost::atomic<bool>   atomic_bool;
 // We'll fake atomic bools for now, for more backward compat.
 // This is just an example, after all.
@@ -330,7 +331,7 @@ int UHD_SAFE_MAIN(int argc, char *argv[]){
         if(ref != "internal") {
             std::cout << "Now confirming lock on clock signals..." << std::endl;
             bool is_locked = false;
-            boost::system_time end_time = boost::get_system_time() + boost::posix_time::milliseconds(80);
+            boost::system_time end_time = boost::get_system_time() + boost::posix_time::milliseconds(CLOCK_TIMEOUT);
             for (int i = 0; i < num_mboards; i++) {
                 if (ref == "mimo" and i == 0) continue;
                 while((is_locked = usrp->get_mboard_sensor("ref_locked",i).to_bool()) == false and
-- 
2.1.4

